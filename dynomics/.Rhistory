x = 0
while(ppois(x,lambda)<u){ # Calcul de la valeur du x en fonction de la distribution de la loi de poisson
x=x+1
}
return(x)
}
#Bouclage de la fonction précédente sur un vecteur de taille n
my_rpois <- function(n, lambda) {
x <- rep(NA, len=n)
for (i in 1:n) {
x[i] <- my_rpois_one(lambda)
}
return(x)
}
lambda <- 1.58
n <- 10000
x <- my_rpois(n, lambda)
reel <- rpois(n, lambda)
#reel
#x
plot(table(x)/n, col="steelblue", ylab = "Probabilite",
main = paste("Fonction de masse, lambda =", lambda))
val_x <- seq(from=0, to=7)
val_y <- dpois(val_x, lambda)
points(val_x, val_y, col="red", lwd=2)
#Calcul pour une valeur de la loi discrète définie ci dessous
my_rdiscret_one <- function() {
u <- runif(1)
#Définition de la loi
x <- c(-3, 1.3, 7, 15.2) #Définition des différentes valeurs
dx <- c(0.1, 0.4, 0.3, 0.2) #proba associée à chaque valeur
px <- cumsum(dx) #proba cumulatif
i <- 1
while(px[i] < u){
i <- i+1
}
return(x[i])
}
#Fonction calculant pour un vecteur de taille n leurs valeurs dans une fonction de répartition de la loi discrète définie au-dessus
my_rdiscret <- function(n) {
x <- rep(NA, len=n)
for (i in 1:n) {
x[i] <- my_rdiscret_one()
}
return(x)
}
n <- 10000
x <- my_rdiscret(n)
plot(table(x)/n, col="steelblue", ylab = "Probabilite", xlab = "Valeurs de x",
main = "Fonction de masse de la loi discrète")
val_x <- c(-3, 1.3, 7, 15.2)
val_y <- c(0.1, 0.4, 0.3, 0.2)
points(val_x, val_y, col="red", lwd=2)
# Implémentation de la fonction de densité pour lu=0 et beta=1
# A partir de la fonction
my_dlaplace <- function(x) {
return(1/2*exp(-abs(x)))
}
val_x <- seq(from=-4, to=4, len=100)
val_y <- my_dlaplace(val_x)
plot(val_x, val_y, col="red", type="l", main = "Distribution de Laplace, mu=0, beta=1",
xlab = "x", ylab = "")
#Calcul la distribution sur un vecteur de taille n a partir de la formule ci-dessus
my_plaplace <- function(x) {
return( (1/2) * (1 + sign(x) - sign(x) * exp(-abs(x)) ) )
}
val_x <- seq(from=-4, to=4, len=100)
val_y <- my_plaplace(val_x)
plot(val_x, val_y, col="steelblue", type="l", xlab = "x", ylab = "",
main = "Repartition de Laplace, mu=0, beta=1", lwd=2)
#Application de my_qplaplace sur un vecteur de taille n
my_qlaplace <- function(p_vec) {
find_sign = (0.5 - p_vec)
return( sign(find_sign)*
log(1-sign(find_sign)+
sign(find_sign)*2*p_vec ) )
}
val_x <- seq(from=0, to=1, len=100)
val_y2 <- my_qlaplace(val_x)
plot(val_y2, val_x, col="steelblue", type="l", lwd=3, ylab = "", xlab = "x",
main = "Comparaison entre la fonction de repartition et la fonction quantile")
lines(seq(from=-4, to=4, len=100), val_y, lty=2, col="red", lwd = 3)
legend("topleft", legend=c("Quantile", "Repartition"), col = c("steelblue", "red"),
lty = 1:2, cex = 0.8)
#Application de la fonction quantile de Laplace sur n valeurs issues d'une loi uniforme
my_rlaplace <- function(n) {
u <- runif(n)
x <- my_qlaplace(u)
return(x)
}
n <- 100000
x <- my_rlaplace(n)
truehist(x, col="steelblue", main="Histogramme de la fonction de répartition de Laplace",
sub = "Avec : mu=0  lambda=1")
val_x <- seq(from=-10, to=10, len=1000)
val_y <- my_dlaplace(val_x)
lines(val_x, val_y, col="red")
legend("topleft", legend= "Densite", col = "red",
lty = 1, cex = 0.8)
h <- function(x) { #Fonction calculant le rapport entre la distribution normale et de Laplace pour un x donné
return(dnorm(x)/my_dlaplace(x))
}
val_x <- seq(from=-10, to=10, len=10000)
val_y=h(val_x)
plot(val_x, val_y, type = "l", main = "Distribution du rapport dnorm(x)/dlaplace(x)",
col = "steelblue", lwd = 2)
legend("left", legend= "Valeur min de m", col = "red",
lty = 2, cex = 0.8)
#m <- sqrt(2*exp(1)/pi)
#Détermination graphique de m
m <- max(val_y)
abline(h = m, col="red", lwd=2, lty=2)
val_y=dnorm(val_x)
plot(val_x, val_y, type = "l", main = "Comparaison des distributions avec x=m",
col = "steelblue", lwd = 2)
val_y = m*my_dlaplace(val_x)
lines(val_x, val_y, col="red", lwd = 2, lty = 2)
legend("topleft", legend= c("Distribution normale", "Distribution laplace x=m"),
col = c("steelblue", "red"),
lty = 1:22, cex = 0.8)
my_rnorm_rejet <- function(n, m) {
x1 <- my_rlaplace(n)
x2 <- runif(n)
filtre <- which(x2 <= dnorm(x1)/(m*my_dlaplace(x1)))
return(x1[filtre])
}
n <- 100000
m <- sqrt(2*exp(1)/pi)
x = my_rnorm_rejet(n, m)
truehist(x, col="steelblue", main = "Repartition de la loi Normale (0,1) par methode de rejet")
val_x = seq(from=-4, to=4, len=length(x))
val_y <- dnorm(val_x)
lines(val_x, val_y, col="red", lwd=2, lty = 2)
legend("topleft", legend= "Fonction de densite associee ", col = "red",
lty = 2, cex = 0.8)
#fonction de distribution de la fonction f
my_dtarget <-function(x) {
return(0.2*dnorm(x, -3, 2) +
0.5*dnorm(x, 0, 1) +
0.3*dnorm(x, 5, 3))
}
#Définition de la loi de proposition
#Calcul d'une valeur tirée d'une fonction de répartition d'une loi uniforme de paramètre (from_x, 1)
#Sert a récupérer un point proche d'entrée donnée, servant plus tard à comparer
rprop <- function(from_x, SD) {
return(rnorm(1, mean = from_x, sd = SD))
}
dprop <- function(to_x, from_x, SD) {
return(dnorm(to_x, mean = from_x, sd = SD))
}
#Fonction de répartition de la fonction f pour un vecteur de taille n
my_rtarget <- function(n, SD=1) {
x <- rep(NA, n)
x[1] <- -5
for(i in 1:n){
yi <- rprop(x[i], SD) #Calcul un point proche du précédent
#Calcul de la probabilité d'observer le point de coordonnées yi
p <- min(c(1, (my_dtarget(yi)/my_dtarget(x[i])) * (dprop(x[i], yi, SD)/dprop(yi, x[i], SD))))
u <- runif(1)
if (u <= p){
x[i+1] <- yi
} else {
x[i+1] <- x[i]
}
}
return(x)
}
n <- 100000
val_x = seq(from=-10, to=15, len = n)
val_y <- my_dtarget(val_x)
x = my_rtarget(n, SD = 1)
truehist(x, col="steelblue", main="Histogramme de la fonction de repartition de f",
ylab = "", xlab = "x", sub="Loi proposition : Normale(x,1)")
lines(val_x, val_y, type = "l", lwd = 2, col="red")
legend("topleft", legend= "Densite", col = "red",
lty = 1, cex = 0.8)
ab = c(1:length(x))
plot(ab, x, type='l', main ="Profil de la chaine en fonction du temps",
xlab = "Nombre de simulation", ylab = "Valeur de la chaine")
n <- 100000
val_x = seq(from=-10, to=15, len = n)
val_y <- my_dtarget(val_x)
x1 = my_rtarget(n, SD = 0.2)
x2 = my_rtarget(n, SD = 1)
x3 = my_rtarget(n, SD = 5)
x4 = my_rtarget(n, SD = 20)
par(mfrow=c(2,2))
truehist(x1, col="steelblue", main="Loi proposition : Normale(x,0.2)",
ylab = "", xlab = "x", xlim = c(-10, 15))
lines(val_x, val_y, type = "l", lwd = 2, col="red")
legend("topleft", legend= "Densite", col = "red",
lty = 1, cex = 0.8)
truehist(x2, col="steelblue", main="Loi proposition : Normale(x,1)",
ylab = "", xlab = "x", xlim = c(-10, 15))
lines(val_x, val_y, type = "l", lwd = 2, col="red")
legend("topleft", legend= "Densite", col = "red",
lty = 1, cex = 0.8)
truehist(x3, col="steelblue", main="Loi proposition : Normale(x,5)",
ylab = "", xlab = "x", xlim = c(-10, 15))
lines(val_x, val_y, type = "l", lwd = 2, col="red")
legend("topleft", legend= "Densite", col = "red",
lty = 1, cex = 0.8)
truehist(x4, col="steelblue", main="Loi proposition : Normale(x,20)",
ylab = "", xlab = "x", xlim = c(-10, 15))
lines(val_x, val_y, type = "l", lwd = 2, col="red")
legend("topleft", legend= "Densite", col = "red",
lty = 1, cex = 0.8)
ab = c(1:length(x))
plot(ab, x1, type='l', main ="Profil de la chaine en fonction du temps",
xlab = "Nombre de simulations", ylab = "Valeur de la chaine")
rprop <- function(from_x, pas) {
return(runif(1, min = from_x-pas, max = from_x+pas))
}
dprop <- function(to_x, from_x, pas) {
return(dunif(to_x, min = from_x-pas, max = from_x+pas))
}
my_rtarget <- function(n, pas=1) {
x <- rep(NA, n)
x[1] <- -5
for(i in 1:n){
yi <- rprop(x[i], pas)
p <- min(c(1, (my_dtarget(yi)/my_dtarget(x[i])) * (dprop(x[i], yi, pas)/dprop(yi, x[i], pas))))
u <- runif(1)
if (u <= p){
x[i+1] <- yi
} else {
x[i+1] <- x[i]
}
}
return(x)
}
n <- 100000
val_x = seq(from=-10, to=15, len = n)
val_y <- my_dtarget(val_x)
x1 = my_rtarget(n, pas = 0.1)
x2 = my_rtarget(n, 1)
x3 = my_rtarget(n, 2)
x4 = my_rtarget(n, 5)
par(mfrow=c(2,2))
truehist(x1, col="steelblue", main="Loi proposition : U(x-0.1,x+0.1)",
ylab = "", xlab = "x", xlim = c(-10, 15))
lines(val_x, val_y, type = "l", lwd = 2, col="red")
legend("topleft", legend= "Densite", col = "red",
lty = 1, cex = 0.8)
truehist(x2, col="steelblue", main="Loi proposition : U(x-1,x+1)",
ylab = "", xlab = "x", xlim = c(-10, 15))
lines(val_x, val_y, type = "l", lwd = 2, col="red")
legend("topleft", legend= "Densite", col = "red",
lty = 1, cex = 0.8)
truehist(x3, col="steelblue", main="Loi proposition : U(x-2, x+2)",
ylab = "", xlab = "x", xlim = c(-10, 15))
lines(val_x, val_y, type = "l", lwd = 2, col="red")
legend("topleft", legend= "Densite", col = "red",
lty = 1, cex = 0.8)
truehist(x4, col="steelblue", main="Loi proposition : U(x-5, x+5)",
ylab = "", xlab = "x", xlim = c(-10, 15))
lines(val_x, val_y, type = "l", lwd = 2, col="red")
legend("topleft", legend= "Densite", col = "red",
lty = 1, cex = 0.8)
# Loi posterior à approximer, que l'on peut calculer analytiquement
posterior = function(theta, n, x){
post = dbeta(theta, x+1, n-x+1)
return(post)
}
# Autre implémentation possible de la loi posterior
#
# f = function(theta){
#   dbinom(70, 100, theta)*dunif(theta)
# }
# p_70 = integrate(f, lower=0, upper=1)$value
# posterior = function(theta){
#   return(dbinom(70, 100, theta)*dunif(theta)/p_70)
# }
# Loi de proposition (loi bêta de paramètres (1/1-theta, 2))
rprop_theta = function(from_theta){
return(rbeta(1, shape1 = 1/(1-from_theta),
shape2 = 2))
}
dprop_theta = function(to_theta, from_theta){
return(dbeta(to_theta, shape1 = 1/(1-from_theta),
shape2 = 2))
}
# Approximation de la fonction par MCMC
my_rtarget_theta = function(n){
x = rep(NA, n)
# On choisit de partir de x = 0.5
x[1] = 0.5
for (i in 1:n) {
yi = rprop_theta(x[i])
p = min(c(1,(posterior(yi, 100, 70)/posterior(x[i], 100,70))*(dprop_theta(x[i],yi)/dprop_theta(yi, x[i])) ))
u = runif(1)
if(u <= p){
x[i+1] = yi
}else{
x[i+1] = x[i]
}
}
return(x)
}
# Valeurs réelles de la fonction posterior
val_x = seq(from = 0, to = 1, len = 100)
val_y = posterior(val_x, n = 100, x = 70)
# On choisit d'effectuer 100 000 pas dans le MCMC
val_theta = my_rtarget_theta(100000)
# Histogramme des valeurs calculées
truehist(val_theta, main = "Histogramme des valeurs theta dans la chaine de markov", xlab = "valeurs theta")
# Superposition de la fonction réelle
lines(val_x, val_y, type = "l", col = "red")
ab = c(1:length(val_theta))
plot(ab, val_theta, type='l', main ="Profil de la chaine en fonction du temps",
xlab = "Nombre de simulations", ylab = "Valeur de la chaine")
IC = 1.96 * sd(val_theta) / sqrt(length(val_theta))
m_MCMC_IC_1 = mean(val_theta) - IC
m_MCMC_IC_2 = mean(val_theta) + IC
x = 70 # Nombre mutants
n = 100 # Taille population
nb_obs = 1000000 # Nombre simulations
i = 1
# Vecteur des theta pour lesquels on retrouve xobs et nobs
vec_theta_s = c()
for (obs in 1:nb_obs) {
# Génération d'un theta dans une loi uniforme
theta_s = runif(1, min = 0, max = 1)
# Génération d'un xs selon le theta précédent
x_s = rbinom(1, 100, theta_s)
if(x_s == x){
# Si xs = xobs, on retient le theta généré
vec_theta_s[i] = theta_s
i= i+1
}
}
# Histogramme des valeurs de theta retenues
truehist(vec_theta_s, main = "Histogramme des valeurs theta dans la loi conjointe", xlab = "valeurs theta")
# On superpose la même courbe que précédemment
lines(val_x, val_y, type = "l", col = "red")
IC = 1.96 * sd(vec_theta_s) / sqrt(length(vec_theta_s))
m_conj_IC_1 = mean(vec_theta_s) - IC
m_conj_IC_2 = mean(vec_theta_s) + IC
x2 = c(67:73) # Nombre mutants
n = 100 # Taille population
nb_obs = 1000000 # Nombre simulations
i = 1
# Vecteur des theta pour lesquels on retrouve xobs et nobs
vec_theta_s2 = c()
for (obs in 1:nb_obs) {
# Génération d'un theta dans une loi uniforme
theta_s = runif(1, min = 0, max = 1)
# Génération d'un xs selon le theta précédent
x_s = rbinom(1, 100, theta_s)
if(sum(x_s == x2)>0){
# Si xs = xobs, on retient le theta généré
vec_theta_s2[i] = theta_s
i= i+1
}
}
# Histogramme des valeurs de theta retenues
truehist(vec_theta_s2, ylim = c(0,8.5), main = "Histogramme des valeurs theta dans la loi conjointe en elargissant le seuil d'acceptation", xlab = "valeurs theta")
# On superpose la même courbe que précédemment
lines(val_x, val_y, type = "l", col = "red")
IC2 = 1.96 * sd(vec_theta_s2) / sqrt(length(vec_theta_s2))
m_conj_IC_1_bis = mean(vec_theta_s2) - IC2
m_conj_IC_2_bis = mean(vec_theta_s2) + IC2
x2 = c(67:73) # Nombre mutants
n = 100 # Taille population
nb_obs = 1000000 # Nombre simulations
i = 1
# Vecteur des theta pour lesquels on retrouve xobs et nobs
vec_theta_s2 = c()
for (obs in 1:nb_obs) {
# Génération d'un theta dans une loi uniforme
theta_s = runif(1, min = 0, max = 1)
# Génération d'un xs selon le theta précédent
x_s = rbinom(1, 100, theta_s)
if(sum(x_s == x2)>0){
# Si xs = xobs, on retient le theta généré
vec_theta_s2[i] = theta_s
i= i+1
}
}
# Histogramme des valeurs de theta retenues
truehist(vec_theta_s2, ylim = c(0,8.5), main = "Histogramme des valeurs theta dans la loi conjointe\n en elargissant le seuil d'acceptation", xlab = "valeurs theta")
# On superpose la même courbe que précédemment
lines(val_x, val_y, type = "l", col = "red")
x2 = c(67:73) # Nombre mutants
n = 100 # Taille population
nb_obs = 1000000 # Nombre simulations
i = 1
# Vecteur des theta pour lesquels on retrouve xobs et nobs
vec_theta_s2 = c()
for (obs in 1:nb_obs) {
# Génération d'un theta dans une loi uniforme
theta_s = runif(1, min = 0, max = 1)
# Génération d'un xs selon le theta précédent
x_s = rbinom(1, 100, theta_s)
if(sum(x_s == x2)>0){
# Si xs = xobs, on retient le theta généré
vec_theta_s2[i] = theta_s
i= i+1
}
}
# Histogramme des valeurs de theta retenues
truehist(vec_theta_s2, ylim = c(0,8.5), main = "Valeurs theta dans la loi conjointe\n en elargissant le seuil d'acceptation", xlab = "valeurs theta")
# On superpose la même courbe que précédemment
lines(val_x, val_y, type = "l", col = "red")
IC2 = 1.96 * sd(vec_theta_s2) / sqrt(length(vec_theta_s2))
m_conj_IC_1_bis = mean(vec_theta_s2) - IC2
m_conj_IC_2_bis = mean(vec_theta_s2) + IC2
m_conj_IC_1
m_conj_IC_2
m_conj_IC_1_bis
m_conj_IC_2_bis
q025_IC = quantile(val_theta, 0.025, names = FALSE)
q075_IC = quantile(val_theta, 0.975, names = FALSE)
q025_IC
q075_IC
q025_conj_bis = quantile(vec_theta_s2, 0.025, names = FALSE)
q075_conj_bis = quantile(vec_theta_s2, 0.975, names = FALSE)
q075_conj_bis
q025_conj_bis
q025_conj
q025_conj = quantile(vec_theta_s, 0.025, names = FALSE)
q075_conj = quantile(vec_theta_s, 0.975, names = FALSE)
q025_conj
q075_conj
ab = c(1:100)
plot(ab, val_theta[100], type='l', main ="Profil de la chaine en fonction du temps",
xlab = "Nombre de simulations", ylab = "Valeur de la chaine")
ab = c(1:100)
plot(ab, val_theta[1:100], type='l', main ="Profil de la chaine en fonction du temps",
xlab = "Nombre de simulations", ylab = "Valeur de la chaine")
ab = c(1:1000)
plot(ab, val_theta[1:1000], type='l', main ="Profil de la chaine en fonction du temps",
xlab = "Nombre de simulations", ylab = "Valeur de la chaine")
ab = c(1:1000)
plot(ab, val_theta[1:10000], type='l', main ="Profil de la chaine en fonction du temps",
xlab = "Nombre de simulations", ylab = "Valeur de la chaine")
ab = c(1:10000)
plot(ab, val_theta[1:10000], type='l', main ="Profil de la chaine en fonction du temps",
xlab = "Nombre de simulations", ylab = "Valeur de la chaine")
BiocManager::install("mixOmics")
BiocManager::install("timeOmics")
install.packages("tidyverse")
library(tidyverse)
install.packages("rlang")
install.packages("rlang")
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
install.packages("tibble")
install.packages("tibble")
library(tidyverse)
install.packages("dplyr")
install.packages("pheatmap")
#library("tidyverse")
library("mixOmics")
licence()
#library("tidyverse")
library("mixOmics")
install.packages("bio3d", dependencies=TRUE)
setwd("Documents/M2_BI/Bioinfo_struct/projet_structure/modeles3D/RaptorX_models/")
read.table(file = "601143_model1.localQuality.txt")
read.table(file = "601143_model1.localQuality.txt", skip = 2)
model1 = read.table(file = "601143_model1.localQuality.txt", skip = 2)
model2 = read.table(file = "601143_model2.localQuality.txt", skip = 2)
model3 = read.table(file = "601143_model3.localQuality.txt", skip = 2)
model4 = read.table(file = "601143_model4.localQuality.txt", skip = 2)
model5 = read.table(file = "601143_model5.localQuality.txt", skip = 2)
View(model1)
plot(model1$V3)
plot(model1$V3, type = "l")
abline(model2$V3)
lines(model2$V3)
plot(model1$V3, type = "l", col = "red")
lines(model2$V3, col = "blue")
lines(model3$V3, col = "green")
lines(model4$V3, col = "black")
lines(model5$V3, col = "magenta")
mean(model1$V3)
mean(model1$V3)
mean(model2$V3)
mean(model3$V3)
mean(model4$V3)
mean(model5$V3)
setwd("../../dynomics/")
read.table("temp_anm.nmd.txt")
read.table("temp_anm.nmd.txt", skip = 2)
harmo = read.table("temp_anm.nmd.txt", skip = 2)
harmo = read.table("temp_anm.nmd.txt", skip = 2)
harmo = read.table("temp_anm.nmd.txt", skip = 2)
harmo = read.table("temp_anm.nmd.txt", skip = 2, sep = "\n")
View(harmo)
harmo[8,]
harmo = read.table("temp_anm.nmd.txt", skip = 2, sep = "\n", stringsAsFactors = FALSE)
harmo[8,]
library(stringr)
str_split(harmo[8,], " ")
str_split(harmo[8,], " ")[[1]][-1]
as.integer(str_split(harmo[8,], " ")[[1]][-1])
str_split(harmo[8,], " ")[[1]][-1][1]
as.integer(str_split(harmo[8,], " ")[[1]][-1][1])
str_split(harmo[8,], " ")[[1]][-1]
vec_h8 = str_split(harmo[8,], " ")[[1]][-1]
for (num in vec_h8) {
print(num)
}
for (num in 1:length(vec_h8)) {
as.integer(vec_h8[num])
}
for (num in 1:length(vec_h8)) {
print(as.integer(vec_h8[num]))
}
vec_h8
